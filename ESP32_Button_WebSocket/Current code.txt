#include <WiFi.h>
#include <WebSocketsClient.h>

const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";
const char* relay_host = "192.168.66.100"; // Node.js relay server IP
const int relay_port = 8080;

// Updated pin list (replacing 35 → 19, and 34 → 21)
const int buttonPins[12] = {
  13, 12, 14, 27, 26, 25, 33, 32, 19, 21, 23, 22
};

// Button mapping: 0-2: Bus1, 3-5: Bus2, 6-8: Bus3, 9-11: Bus4
const char* actions[3] = {"BOARD", "EXIT", "MOVE"};

bool lastButtonState[12];
unsigned long lastButtonTime[12] = {0}; // For debouncing
const unsigned long debounceDelay = 150; // ms

WebSocketsClient webSocket;

void webSocketEvent(WStype_t type, uint8_t * payload, size_t length) {
  if (type == WStype_CONNECTED) {
    Serial.println("Connected to relay server");
  } else if (type == WStype_DISCONNECTED) {
    Serial.println("Disconnected from relay server");
  }
}

void setup() {
  Serial.begin(115200);

  for (int i = 0; i < 12; i++) {
    pinMode(buttonPins[i], INPUT_PULLUP);
    lastButtonState[i] = digitalRead(buttonPins[i]);
    lastButtonTime[i] = 0;
  }

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi connected.");
  Serial.print("ESP32 IP Address: ");
  Serial.println(WiFi.localIP());

  webSocket.begin(relay_host, relay_port, "/esp32");
  webSocket.onEvent(webSocketEvent);
}

void loop() {
  webSocket.loop();
  unsigned long now = millis();
  for (int i = 0; i < 12; i++) {
    bool currentState = digitalRead(buttonPins[i]);
    // Debounce: only send if enough time has passed since last press
    if (lastButtonState[i] == HIGH && currentState == LOW && (now - lastButtonTime[i] > debounceDelay)) {
      lastButtonTime[i] = now;
      int busNum = (i / 3) + 1; // 1 to 4
      int actionIdx = i % 3; // 0: BOARD, 1: EXIT, 2: MOVE
      char msg[16];
      snprintf(msg, sizeof(msg), "B%d_%s", busNum, actions[actionIdx]);
      Serial.printf("Button %d pressed: %s\n", i + 1, msg);
      webSocket.sendTXT(msg);
    }
    lastButtonState[i] = currentState;
  }
  delay(10);
}
